from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /scan
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from_name = " ".join(context.args).lower().strip() if context.args else None

    chrome_options = Options()
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=chrome_options)
    driver.set_window_size(1920, 1080)

    try:
        url = "https://skinport.com/market?app=730"
        if from_name:
            url += f"&q={from_name.replace(' ', '%20')}"

        driver.get(url)
        time.sleep(5)  # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏

        items = driver.find_elements(By.CSS_SELECTOR, "a.css-164ys2a")  # –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        found = []

        for item in items:
            try:
                name = item.find_element(By.CSS_SELECTOR, ".Line-clamp-2 span").text
                price = item.find_element(By.CSS_SELECTOR, ".font-bold").text.replace("‚Ç¨", "").replace(",", ".")
                url = item.get_attribute("href")
                price_float = float(price)

                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: {name} –∑–∞ {price_float}‚Ç¨")

                # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
                for item_name, price_range in items_to_search.items():
                    if normalize(item_name).issubset(normalize(name)):
                        if price_range["min"] <= price_float <= price_range["max"]:
                            found.append(f"{name} –∑–∞ {price_float}‚Ç¨\nüîó {url}")
                            break

                # –µ—Å–ª–∏ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ /scan <–Ω–∞–∑–≤–∞–Ω–∏–µ> 123
                if from_name:
                    if normalize(from_name).issubset(normalize(name)):
                        found.append(f"{name} –∑–∞ {price_float}‚Ç¨\nüîó {url}")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
                continue

        if found:
            await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(found))
        else:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Selenium: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
    finally:
        driver.quit()
