import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
TELEGRAM_CHAT_ID = "–í–ê–®_CHAT_ID"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ ---
items_to_track = {}  # {–∫–ª—é—á–µ–≤—ã–µ_—Å–ª–æ–≤–∞: –º–∞–∫—Å_—Ü–µ–Ω–∞}

# --- Telegram –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
async def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ Skinport.\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/search ‚Äî —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "/scan <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞> ‚Äî –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –≤—Ä—É—á–Ω—É—é"
    )
    await update.message.reply_text(message)

async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /add Karambit Knife 650")
        return

    *name_parts, price_str = context.args
    item_name = " ".join(name_parts)

    try:
        max_price = float(price_str.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä: 650")
        return

    items_to_track[item_name.lower()] = max_price
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {item_name} –¥–æ {max_price}‚Ç¨")

async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /remove Karambit Knife")
        return

    item_name = " ".join(context.args).lower()
    if item_name in items_to_track:
        del items_to_track[item_name]
        await update.message.reply_text(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω: {item_name}")
    else:
        await update.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not items_to_track:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    msg = "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for item, price in items_to_track.items():
        msg += f"‚Äî {item} –¥–æ {price}‚Ç¨\n"
    await update.message.reply_text(msg)

async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /scan Karambit Knife")
        return

    keywords = " ".join(context.args).lower()
    found = []

    try:
        response = requests.get(API_URL)
        data = response.json()

        for entry in data:
            name = entry.get("market_hash_name", "").lower()
            price = entry.get("min_price")
            url = entry.get("item_page")

            if keywords in name and price:
                found.append(f"{entry['market_hash_name']} ‚Äî {price}‚Ç¨\nüîó {url}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return

    if found:
        await update.message.reply_text("üõí –ù–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n".join(found))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# --- –ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
async def auto_check():
    await asyncio.sleep(5)
    while True:
        try:
            response = requests.get(API_URL)
            data = response.json()

            for entry in data:
                name = entry.get("market_hash_name", "")
                price = entry.get("min_price")
                url = entry.get("item_page", "")
                name_lower = name.lower()

                for item_keywords, max_price in items_to_track.items():
                    if item_keywords in name_lower and price and float(price) <= max_price:
                        message = f"üîî –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {name} –∑–∞ {price}‚Ç¨\nüîó {url}"
                        await send_telegram_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

        await asyncio.sleep(60)  # –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_item))
    app.add_handler(CommandHandler("remove", remove_item))
    app.add_handler(CommandHandler("search", search_items))
    app.add_handler(CommandHandler("scan", scan))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    asyncio.create_task(auto_check())  # –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏

    app.run_polling()

if __name__ == "__main__":
    main()
