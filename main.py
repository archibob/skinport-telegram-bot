import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
TELEGRAM_CHAT_ID = "388895285"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
items_to_search = {}

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
def normalize(text):
    return set(text.lower().replace("|", "").replace("-", "").split())

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ Skinport.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∏–Ω_—Ü–µ–Ω–∞> <–º–∞–∫—Å_—Ü–µ–Ω–∞> ‚Äî —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π\n"
        "/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/search ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "/scan ‚Äî —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É"
    )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> –∏–ª–∏ /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∏–Ω_—Ü–µ–Ω–∞> <–º–∞–∫—Å_—Ü–µ–Ω–∞>")
        return

    try:
        if len(context.args) >= 3 and context.args[-2].replace(",", ".").replace(".", "", 1).isdigit() and context.args[-1].replace(",", ".").replace(".", "", 1).isdigit():
            *name_parts, min_price_str, max_price_str = context.args
            min_price = float(min_price_str.replace(",", "."))
            max_price = float(max_price_str.replace(",", "."))
        else:
            *name_parts, max_price_str = context.args
            min_price = 0
            max_price = float(max_price_str.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.")
        return

    item_name = " ".join(name_parts).lower().strip()
    items_to_search[item_name] = {"min": min_price, "max": max_price}
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω: {item_name} –æ—Ç {min_price}‚Ç¨ –¥–æ {max_price}‚Ç¨")

# –ö–æ–º–∞–Ω–¥–∞ /remove
async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    item_name = " ".join(context.args).lower().strip()
    if item_name in items_to_search:
        del items_to_search[item_name]
        await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω: {item_name}")
    else:
        await update.message.reply_text(f"{item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not items_to_search:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for item, price_range in items_to_search.items():
        message += f"- {item} –æ—Ç {price_range['min']}‚Ç¨ –¥–æ {price_range['max']}‚Ç¨\n"
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /scan
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    found = []

    try:
        response = requests.get(API_URL)
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç API")

        for entry in data:
            if isinstance(entry, str):
                logger.warning(f"–°—Ç—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ: {entry}")
                continue

            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            if "graffiti" in name.lower():
                continue

            name_set = normalize(name)
            for item_name, price_range in items_to_search.items():
                item_set = normalize(item_name)
                if item_set.issubset(name_set) and min_price:
                    min_price_f = float(min_price)
                    if price_range["min"] <= min_price_f <= price_range["max"]:
                        found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        return

    if found:
        await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(found))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_item))
    app.add_handler(CommandHandler("remove", remove_item))
    app.add_handler(CommandHandler("search", search_items))
    app.add_handler(CommandHandler("scan", scan))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
