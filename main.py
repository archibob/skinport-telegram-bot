import logging
import requests
from urllib.parse import quote
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
TELEGRAM_CHAT_ID = "388895285"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤: (–Ω–∞–∑–≤–∞–Ω–∏–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞)
tracked_items = []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ Skinport.\n\n" \
              "üü¢ /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n" \
              "üî¥ /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n" \
              "üìã /search ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n" \
              "üîç /scan ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞ Skinport"
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞>")
        return
    item_name = " ".join(context.args[:-1])
    try:
        max_price = float(context.args[-1])
    except ValueError:
        await update.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–º–∞–∫—Å. —Ü–µ–Ω–∞).")
        return

    tracked_items.append((item_name, max_price))
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω: {item_name} –¥–æ {max_price}‚Ç¨")

# –ö–æ–º–∞–Ω–¥–∞ /remove
async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    item_name = " ".join(context.args)
    for item in tracked_items:
        if item[0].lower() == item_name.lower():
            tracked_items.remove(item)
            await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω: {item_name}")
            return
    await update.message.reply_text("–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not tracked_items:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    message = "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for name, price in tracked_items:
        message += f"- {name} –¥–æ {price}‚Ç¨\n"
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /scan
async def scan_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not tracked_items:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    found = []
    for item_name, max_price in tracked_items:
        url = f"https://api.skinport.com/v1/items?app_id=730&currency=EUR&tradable=1"
        try:
            response = requests.get(url)
            if response.status_code != 200:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Skinport.")
                return
            data = response.json()
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Skinport: {e}")
            return

        for item in data:
            name = item.get("market_hash_name", "")
            min_price = item.get("min_price")

            if item_name.lower() in name.lower() and float(min_price) <= max_price:
                item_url_name = quote(name, safe='')
                found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nhttps://skinport.com/item/{item_url_name}")

    if found:
        await update.message.reply_text("üü¢ –ù–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n".join(found))
    else:
        await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_item))
    application.add_handler(CommandHandler("remove", remove_item))
    application.add_handler(CommandHandler("search", search_items))
    application.add_handler(CommandHandler("scan", scan_items))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
