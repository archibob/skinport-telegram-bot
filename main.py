import logging
import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
TELEGRAM_CHAT_ID = "388895285"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
items_to_search = {}
item_prices = {}

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
def normalize(text):
    text = re.sub(r'\(.*?\)', '', text)  # –£–±–∏—Ä–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä (Well-Worn)
    text = text.lower().replace("-", " ").replace("|", " ").strip()
    normalized_text = set(text.split())
    logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {normalized_text}")
    return normalized_text

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω
async def check_price_changes(item_name, current_price):
    if item_name in item_prices:
        previous_price = item_prices[item_name]
        if current_price != previous_price:
            message = f"–¶–µ–Ω–∞ –¥–ª—è {item_name} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å {previous_price}‚Ç¨ –Ω–∞ {current_price}‚Ç¨."
            await send_telegram_message(message)
            item_prices[item_name] = current_price  # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    else:
        item_prices[item_name] = current_price  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ Skinport.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/search ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "/scan ‚Äî —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É\n"
        "/filter ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ"
    )
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /filter (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
async def price_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("5‚Ç¨ - 10‚Ç¨", callback_data='price_5_10')],
        [InlineKeyboardButton("10‚Ç¨ - 20‚Ç¨", callback_data='price_10_20')],
        [InlineKeyboardButton("20‚Ç¨ - 50‚Ç¨", callback_data='price_20_50')],
        [InlineKeyboardButton("50‚Ç¨+", callback_data='price_50_up')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
    price_range = query.data

    if price_range == 'price_5_10':
        await query.edit_message_text("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç 5‚Ç¨ –¥–æ 10‚Ç¨.")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ 5-10‚Ç¨

    elif price_range == 'price_10_20':
        await query.edit_message_text("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç 10‚Ç¨ –¥–æ 20‚Ç¨.")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ 10-20‚Ç¨

    elif price_range == 'price_20_50':
        await query.edit_message_text("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç 20‚Ç¨ –¥–æ 50‚Ç¨.")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ 20-50‚Ç¨

    elif price_range == 'price_50_up':
        await query.edit_message_text("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç 50‚Ç¨ –∏ –≤—ã—à–µ.")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —Ü–µ–Ω–µ –æ—Ç 50‚Ç¨

# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> –∏–ª–∏ /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∏–Ω_—Ü–µ–Ω–∞> <–º–∞–∫—Å_—Ü–µ–Ω–∞>")
        return

    try:
        if len(context.args) >= 3 and context.args[-2].replace(",", ".").replace(".", "", 1).isdigit() and context.args[-1].replace(",", ".").replace(".", "", 1).isdigit():
            *name_parts, min_price_str, max_price_str = context.args
            min_price = float(min_price_str.replace(",", "."))
            max_price = float(max_price_str.replace(",", "."))
        else:
            *name_parts, max_price_str = context.args
            min_price = 0
            max_price = float(max_price_str.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.")
        return

    item_name = " ".join(name_parts).lower().strip()
    items_to_search[item_name] = {"min": min_price, "max": max_price}
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω: {item_name} –æ—Ç {min_price}‚Ç¨ –¥–æ {max_price}‚Ç¨")

# –ö–æ–º–∞–Ω–¥–∞ /remove
async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    item_name = " ".join(context.args).lower().strip()
    if item_name in items_to_search:
        del items_to_search[item_name]
        await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω: {item_name}")
    else:
        await update.message.reply_text(f"{item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not items_to_search:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for item, price_range in items_to_search.items():
        message += f"- {item} –æ—Ç {price_range['min']}‚Ç¨ –¥–æ {price_range['max']}‚Ç¨\n"
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /scan
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    found = []
    url = API_URL

    try:
        response = requests.get(url)
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç API")

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            if "graffiti" in name.lower():
                continue

            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: {name} —Å —Ü–µ–Ω–æ–π {min_price}‚Ç¨")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            await check_price_changes(name, float(min_price))

            name_set = normalize(name)

            for item_name, price_range in items_to_search.items():
                item_set = normalize(item_name)
                if item_set.issubset(name_set) and min_price:
                    min_price_f = float(min_price)
                    if price_range["min"] <= min_price_f <= price_range["max"]:
                        found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        return

    if found:
        await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(found))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_item))
    app.add_handler(CommandHandler("remove", remove_item))
    app.add_handler(CommandHandler("search", search_items))
    app.add_handler(CommandHandler("scan", scan))
    app.add_handler(CommandHandler("filter", price_filter))
    app.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == '__main__':
    main()
