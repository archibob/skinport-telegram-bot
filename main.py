import logging
import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from apscheduler.schedulers.background import BackgroundScheduler

# 
TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
TELEGRAM_CHAT_ID = "388895285"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
items_to_search = {}
favorite_items = {}  # user_id -> { item_name: {min, max, quality} }
waiting_for_input = {}

# –£–ø—Ä–æ—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π
def normalize(text):
    text = re.sub(r'\(.*?\)', '', text)
    text = text.lower().replace("-", " ").replace("|", " ").strip()
    return set(text.split())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton("‚ûï –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_favorite")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],
        [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan")]
    ])

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "add":
        waiting_for_input[user_id] = "add"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ (–æ–ø—Ü.):", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]))

    elif query.data == "add_favorite":
        waiting_for_input[user_id] = "favorite"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤–æ (–æ–ø—Ü.) –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]))

    elif query.data == "list":
        if not items_to_search:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_keyboard())
            return
        keyboard = [[InlineKeyboardButton(f"‚ùå {name}", callback_data=f"delete|{name}") for name in items_to_search]]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        await query.edit_message_text("–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("delete|"):
        name = query.data.split("|", 1)[1]
        if name in items_to_search:
            del items_to_search[name]
        await query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–æ: {name}", reply_markup=main_keyboard())

    elif query.data == "favorites":
        user_favs = favorite_items.get(user_id, {})
        if not user_favs:
            await query.edit_message_text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.", reply_markup=main_keyboard())
            return
        keyboard = [[InlineKeyboardButton(f"‚ùå {name}", callback_data=f"remove_favorite|{name}") for name in user_favs]]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        await query.edit_message_text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith("remove_favorite|"):
        name = query.data.split("|", 1)[1]
        favorite_items.get(user_id, {}).pop(name, None)
        await query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {name}", reply_markup=main_keyboard())

    elif query.data == "scan":
        await scan(query, context)

    elif query.data == "back":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    mode = waiting_for_input.get(user_id)

    if not mode:
        return

    text = update.message.text.strip()
    parts = text.split()

    # –í—ã–¥–µ–ª–∏–º —Ü–µ–Ω—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    prices, quality = [], None
    quality_keywords = {"factory", "minimal", "field", "well", "battle"}
    while parts:
        part = parts[-1].lower()
        if re.match(r"\d+([.,]\d+)?", part):
            prices.insert(0, float(parts.pop().replace(",", ".")))
        elif any(k in part for k in quality_keywords):
            quality = part
            parts.pop()
        else:
            break

    item_name = " ".join(parts).lower()
    if not item_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.", reply_markup=main_keyboard())
        return

    min_price, max_price = 0, 999
    if len(prices) == 2:
        min_price, max_price = prices
    elif len(prices) == 1:
        max_price = prices[0]

    item_data = {"min": min_price, "max": max_price, "quality": quality}

    if mode == "add":
        items_to_search[item_name] = item_data
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {item_name} –æ—Ç {min_price}‚Ç¨ –¥–æ {max_price}‚Ç¨", reply_markup=main_keyboard())

    elif mode == "favorite":
        favorite_items.setdefault(user_id, {})[item_name] = item_data
        await update.message.reply_text(f"‚úÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {item_name} –æ—Ç {min_price}‚Ç¨ –¥–æ {max_price}‚Ç¨", reply_markup=main_keyboard())

    waiting_for_input.pop(user_id, None)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
def match_quality(item_name, expected_quality):
    if not expected_quality:
        return True
    return expected_quality in item_name.lower()

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async def scan(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    user_id = update_or_query.from_user.id
    found = []

    try:
        response = requests.get(API_URL)
        data = response.json()

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            if not min_price or "graffiti" in name.lower():
                continue

            name_set = normalize(name)
            min_price_f = float(min_price)

            # –û–±—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            for item_name, rule in items_to_search.items():
                if normalize(item_name).issubset(name_set) and match_quality(name, rule.get("quality")):
                    if rule["min"] <= min_price_f <= rule["max"]:
                        found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

            # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for fav_name, rule in favorite_items.get(user_id, {}).items():
                if normalize(fav_name).issubset(name_set) and match_quality(name, rule.get("quality")):
                    if rule["min"] <= min_price_f <= rule["max"]:
                        found.append(f"‚≠ê {name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await update_or_query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.", reply_markup=main_keyboard())
        return

    msg = "\n\n".join(found) if found else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await update_or_query.edit_message_text(msg, reply_markup=main_keyboard())

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
async def scheduled_scan(context: ContextTypes.DEFAULT_TYPE):
    found = []
    try:
        response = requests.get(API_URL)
        data = response.json()

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            if not min_price or "graffiti" in name.lower():
                continue

            name_set = normalize(name)
            min_price_f = float(min_price)

            for user_id, favs in favorite_items.items():
                for fav_name, rule in favs.items():
                    if normalize(fav_name).issubset(name_set) and match_quality(name, rule.get("quality")):
                        if rule["min"] <= min_price_f <= rule["max"]:
                            found.append(f"‚≠ê {name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                            break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return

    if found:
        msg = "–ù–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(found)
        context.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=msg)

        for user_id in favorite_items:
            try:
                context.bot.send_message(chat_id=user_id, text=msg)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def start_scheduled_scan(app: Application):
    scheduler = BackgroundScheduler()
    scheduler.add_job(scheduled_scan, 'interval', minutes=2, args=[app])
    scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    start_scheduled_scan(app)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
