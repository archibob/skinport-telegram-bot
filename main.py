import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_states = {}
items_to_search = {}
favorite_items = {}

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫", callback_data="add_to_list")],
        [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_to_favorites")],
        [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan")]
    ])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def get_scan_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="scan")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
def get_delete_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "add_to_list":
        user_states[user_id] = "awaiting_item_name_list"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫:")
    elif query.data == "add_to_favorites":
        user_states[user_id] = "awaiting_item_name_favorites"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:")
    elif query.data == "list":
        user_items = items_to_search.get(user_id, {})
        if not user_items:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=get_main_keyboard())
            return
        keyboard = [
            [InlineKeyboardButton(f"‚ùå {name}", callback_data=f"delete|{name}")] for name in user_items
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await query.edit_message_text("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "favorites":
        user_favs = favorite_items.get(user_id, {})
        if not user_favs:
            await query.edit_message_text("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ.", reply_markup=get_main_keyboard())
            return
        keyboard = [
            [InlineKeyboardButton(f"‚ùå {name}", callback_data=f"delete_fav|{name}")] for name in user_favs
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
        await query.edit_message_text("–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif query.data == "scan":
        await scan(update, context)
    elif query.data.startswith("delete|"):
        name = query.data.split("|", 1)[1]
        if user_id in items_to_search and name in items_to_search[user_id]:
            del items_to_search[user_id][name]
            await query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–æ: {name}", reply_markup=get_main_keyboard())
    elif query.data.startswith("delete_fav|"):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        name = query.data.split("|", 1)[1]
        if user_id in favorite_items and name in favorite_items[user_id]:
            del favorite_items[user_id][name]
            await query.edit_message_text(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {name}", reply_markup=get_main_keyboard())
    elif query.data == "back":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞)
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = user_states.get(user_id)

    if state == "awaiting_item_name_list":
        context.user_data["item_name"] = update.message.text
        user_states[user_id] = "awaiting_price_range_list"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 120):")
    elif state == "awaiting_item_name_favorites":
        context.user_data["item_name"] = update.message.text
        user_states[user_id] = "awaiting_price_range_favorites"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 120):")
    elif state == "awaiting_price_range_list":
        try:
            min_price, max_price = map(float, update.message.text.split())
            item_name = context.user_data["item_name"]
            if user_id not in items_to_search:
                items_to_search[user_id] = {}
            items_to_search[user_id][item_name] = {"min": min_price, "max": max_price}

            user_states[user_id] = None
            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫: {item_name} ({min_price}-{max_price}‚Ç¨)", reply_markup=get_main_keyboard())
        except:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 120).")
    elif state == "awaiting_price_range_favorites":
        try:
            min_price, max_price = map(float, update.message.text.split())
            item_name = context.user_data["item_name"]
            if user_id not in favorite_items:
                favorite_items[user_id] = {}
            favorite_items[user_id][item_name] = {"min": min_price, "max": max_price}

            user_states[user_id] = None
            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {item_name} ({min_price}-{max_price}‚Ç¨)", reply_markup=get_main_keyboard())
        except:
            await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 120).")

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_items = items_to_search.get(user_id, {})
    user_favs = favorite_items.get(user_id, {})
    url = API_URL
    found = []

    try:
        response = requests.get(url)
        data = response.json()

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            if "graffiti" in name.lower():
                continue

            name_set = normalize(name)

            # –ü–æ–∏—Å–∫ –≤ –æ–±—ã—á–Ω—ã—Ö
            for item_name, price_range in user_items.items():
                item_set = normalize(item_name)
                if item_set.issubset(name_set) and min_price:
                    min_price_f = float(min_price)
                    if price_range["min"] <= min_price_f <= price_range["max"]:
                        found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

            # –ü–æ–∏—Å–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            for item_name, price_range in user_favs.items():
                item_set = normalize(item_name)
                if item_set.issubset(name_set) and min_price:
                    min_price_f = float(min_price)
                    if price_range["min"] <= min_price_f <= price_range["max"]:
                        found.append(f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

        if found:
            await context.bot.send_message(chat_id=user_id, text="–ù–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n".join(found), reply_markup=get_scan_keyboard())
        else:
            await context.bot.send_message(chat_id=user_id, text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_scan_keyboard())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await context.bot.send_message(chat_id=user_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
async def scheduled_scan(application):
    url = API_URL
    try:
        response = requests.get(url)
        data = response.json()

        for user_id, user_favs in favorite_items.items():
            user_found = []
            user_items = items_to_search.get(user_id, {})

            for entry in data:
                name = entry.get("market_hash_name", "")
                min_price = entry.get("min_price")
                item_url = entry.get("item_page", "")

                if "graffiti" in name.lower():
                    continue

                name_set = normalize(name)

                for item_name, price_range in user_items.items():
                    item_set = normalize(item_name)
                    if item_set.issubset(name_set) and min_price:
                        min_price_f = float(min_price)
                        if price_range["min"] <= min_price_f <= price_range["max"]:
                            user_found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                            break

                for item_name, price_range in user_favs.items():
                    item_set = normalize(item_name)
                    if item_set.issubset(name_set) and min_price:
                        min_price_f = float(min_price)
                        if price_range["min"] <= min_price_f <= price_range["max"]:
                            user_found.append(f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                            break

            if user_found:
                await application.bot.send_message(chat_id=user_id, text="–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(user_found))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ scheduled scan: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    scheduler = AsyncIOScheduler()
    scheduler.add_job(scheduled_scan, 'interval', minutes=2, args=[application])
    scheduler.start()

    application.run_polling()

if __name__ == "__main__":
    main()
