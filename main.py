import logging
import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –¢–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
TELEGRAM_CHAT_ID = "388895285"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
items_to_search = {}

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π (—Å —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
def normalize(text):
    text = re.sub(r'\(.*?\)', '', text)  # –£–±–∏—Ä–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä (Well-Worn)
    text = text.lower().replace("-", " ").replace("|", " ").strip()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –∑–∞–º–µ–Ω—è–µ–º —Ç–∏—Ä–µ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    normalized_text = set(text.split())  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {normalized_text}")
    return normalized_text

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
def create_buttons():
    buttons = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="add")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="remove")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö", callback_data="search")],
        [InlineKeyboardButton("–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫", callback_data="scan")],
    ]
    return InlineKeyboardMarkup(buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ Skinport.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."
    )
    await update.message.reply_text(message, reply_markup=create_buttons())

# –ö–æ–º–∞–Ω–¥–∞ /add
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞>")

# –ö–æ–º–∞–Ω–¥–∞ /remove
async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()  # –û–∂–∏–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.")

# –ö–æ–º–∞–Ω–¥–∞ /search
async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not items_to_search:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for item, price_range in items_to_search.items():
        message += f"- {item} –æ—Ç {price_range['min']}‚Ç¨ –¥–æ {price_range['max']}‚Ç¨\n"
    
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /scan
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    found = []
    url = API_URL

    try:
        response = requests.get(url)
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç API")

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ –∏ –ø–æ–¥–æ–±–Ω–æ–µ
            if "graffiti" in name.lower():
                continue

            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: {name} —Å —Ü–µ–Ω–æ–π {min_price}‚Ç¨")

            name_set = normalize(name)

            for item_name, price_range in items_to_search.items():
                item_set = normalize(item_name)
                if item_set.issubset(name_set) and min_price:
                    min_price_f = float(min_price)
                    if price_range["min"] <= min_price_f <= price_range["max"]:
                        found.append(f"{name} –∑–∞ {min_price}‚Ç¨\nüîó {item_url}")
                        break

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        return

    if found:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(found))
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(add_item, pattern="^add$"))
    app.add_handler(CallbackQueryHandler(remove_item, pattern="^remove$"))
    app.add_handler(CallbackQueryHandler(search_items, pattern="^search$"))
    app.add_handler(CallbackQueryHandler(scan, pattern="^scan$"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == '__main__':
    main()
