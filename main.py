import requests
import time
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = "8095985098:AAG0DtGHnzq5wXuwo2YlsdpflRvNHuG6glU"
TELEGRAM_CHAT_ID = "388895285"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# üß≤ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (–≤ –µ–≤—Ä–æ)
ITEMS_PRICE_LIMITS = {
    "Sport Gloves | Bronze Morph": 150,
    "Talon Knife": 300,
    "AWP | Asiimov (Battle-Scarred)": 75
}

# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
tracked_items = list(ITEMS_PRICE_LIMITS.keys())

def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", response.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Telegram:", e)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∏—Å–∫–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ç–µ–±—è! –ò—Å–ø–æ–ª—å–∑—É–π /add <item>, /remove <item> –∏ /list –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.")

async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        item_name = " ".join(context.args)
        if item_name not in tracked_items:
            tracked_items.append(item_name)
            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {item_name}")
        else:
            await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç {item_name} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        item_name = " ".join(context.args)
        if item_name in tracked_items:
            tracked_items.remove(item_name)
            await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {item_name}")
        else:
            await update.message.reply_text(f"–ü—Ä–µ–¥–º–µ—Ç {item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

async def list_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if tracked_items:
        items = "\n".join(tracked_items)
        await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n{items}")
    else:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

def check_items():
    try:
        headers = {
            "Accept-Encoding": "br",
            "User-Agent": "Mozilla/5.0"
        }
        response = requests.get(API_URL, headers=headers)
        print(f"Status Code: {response.status_code}")

        if response.status_code != 200:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Skinport: {response.status_code}\n{response.text}"
            print(error_text)
            send_telegram_message(error_text)
            return

        try:
            items = response.json()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", e)
            send_telegram_message(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {e}")
            return

        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")

        matches_found = 0

        for item in items:
            market_name = item.get("market_hash_name", "")
            price = item.get("min_price", None)
            item_url = item.get("item_page", "")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞: {market_name}, –¶–µ–Ω–∞: {price}, –°—Å—ã–ª–∫–∞: {item_url}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            for tracked_item in tracked_items:
                if re.search(tracked_item, market_name, re.IGNORECASE):
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è: {market_name}")
                    if price is not None and price <= ITEMS_PRICE_LIMITS.get(tracked_item, 0):
                        message = f"üîî –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç:\n{market_name}\nüí∂ –¶–µ–Ω–∞: {price} EUR\nüîó {item_url}"
                        print(message)
                        send_telegram_message(message)
                        matches_found += 1

        if matches_found == 0:
            print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            send_telegram_message("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")

    except Exception as e:
        error_msg = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        print(error_msg)
        send_telegram_message(error_msg)

# üîÅ –ó–∞–ø—É—Å–∫ –≤ —Ü–∏–∫–ª–µ
async def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_item))
    application.add_handler(CommandHandler("remove", remove_item))
    application.add_handler(CommandHandler("list", list_items))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    while True:
        check_items()
        time.sleep(120)  # –ü–∞—É–∑–∞ 2 –º–∏–Ω—É—Ç—ã
