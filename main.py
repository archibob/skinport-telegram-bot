import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)
import asyncio

logging.basicConfig(level=logging.INFO)
TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
items_to_track = {}  # {item_name: {"min": 0, "max": 100}}
favorites = {}       # {item_name: {"min": 0, "max": 150}}

# ==== UI ====

def main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_item")],
        [InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫", callback_data="show_list")],
        [InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data="show_favorites")],
        [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan")],
    ])

def back_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def list_keyboard(items, prefix):
    buttons = []
    for name in items.keys():
        buttons.append([InlineKeyboardButton(f"‚ùå {name}", callback_data=f"remove_{prefix}_{name}")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(buttons)

# ==== –ö–æ–º–∞–Ω–¥—ã ====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ Skinport.", reply_markup=main_keyboard())

async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        await query.edit_message_text("–°–∫–∞–Ω–∏—Ä—É—é...", reply_markup=back_keyboard())
    else:
        await update.message.reply_text("–°–∫–∞–Ω–∏—Ä—É—é...", reply_markup=back_keyboard())

    # –¢—É—Ç –∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç Selenium –∏–ª–∏ API)
    found_items = [
        {"name": "Sport Gloves | Bronze Morph", "price": 145.0},
        {"name": "Karambit | Doppler", "price": 290.0},
    ]

    for item in found_items:
        name = item["name"]
        price = item["price"]
        msg = f"üß§ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {name} ‚Äî {price}‚Ç¨"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_add_{name}_{price}")],
        ])

        if query:
            await context.bot.send_message(chat_id=query.message.chat.id, text=msg, reply_markup=keyboard)
        else:
            await update.message.reply_text(msg, reply_markup=keyboard)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ====

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

    elif query.data == "add_item":
        context.user_data["awaiting_item"] = True
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: `AWP Asiimov 100`)", parse_mode="Markdown")

    elif query.data == "show_list":
        if items_to_track:
            await query.edit_message_text("üìÑ –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=list_keyboard(items_to_track, "item"))
        else:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=back_keyboard())

    elif query.data == "show_favorites":
        if favorites:
            await query.edit_message_text("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=list_keyboard(favorites, "fav"))
        else:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", reply_markup=back_keyboard())

    elif query.data == "scan":
        await scan(update, context)

    elif query.data.startswith("remove_item_"):
        name = query.data.removeprefix("remove_item_")
        if name in items_to_track:
            del items_to_track[name]
        await query.edit_message_text("üìÑ –í–∞—à —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=list_keyboard(items_to_track, "item"))

    elif query.data.startswith("remove_fav_"):
        name = query.data.removeprefix("remove_fav_")
        if name in favorites:
            del favorites[name]
        await query.edit_message_text("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:", reply_markup=list_keyboard(favorites, "fav"))

    elif query.data.startswith("fav_add_"):
        _, name, price = query.data.split("_", 2)
        full_name = name.replace("%20", " ")  # –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–±–µ–ª—ã
        try:
            favorites[full_name] = {"min": 0, "max": float(price)}
            await query.edit_message_text(f"‚≠ê {full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", reply_markup=back_keyboard())
        except ValueError:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.", reply_markup=back_keyboard())

# ==== –°–æ–æ–±—â–µ–Ω–∏—è ====

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_item"):
        parts = update.message.text.rsplit(" ", 1)
        if len(parts) != 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å. —Ü–µ–Ω–∞>")
            return

        name, max_price_str = parts
        try:
            max_price = float(max_price_str.replace(",", "."))
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞.")
            return

        items_to_track[name.lower()] = {"min": 0, "max": max_price}
        context.user_data["awaiting_item"] = False
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {name} –¥–æ {max_price}‚Ç¨", reply_markup=main_keyboard())

# ==== –ö–æ–º–∞–Ω–¥–∞ /fav ====

async def add_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /fav <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å. —Ü–µ–Ω–∞>")
        return

    *name_parts, max_price_str = context.args
    name = " ".join(name_parts)

    try:
        max_price = float(max_price_str.replace(",", "."))
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞.")
        return

    favorites[name.lower()] = {"min": 0, "max": max_price}
    await update.message.reply_text(f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {name} –¥–æ {max_price}‚Ç¨", reply_markup=main_keyboard())

# ==== main ====

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("fav", add_favorite))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
