import logging
import requests
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

TELEGRAM_BOT_TOKEN = "8095985098:AAGmSZ1JZFunP2un1392Uh4gUg7LY3AjD6A"
TELEGRAM_CHAT_ID = "388895285"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

items_to_search = {}
favorite_items = {}
waiting_for_input = {}

def normalize(text):
    text = re.sub(r'\(.*?\)', '', text)
    text = text.lower().replace("-", " ").replace("|", " ").strip()
    return set(text.split())

def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add")],
        [InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="add_fav")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "add":
        waiting_for_input[user_id] = "add"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Ü–µ–Ω—É:")
    elif query.data == "add_fav":
        waiting_for_input[user_id] = "fav"
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:")
    elif query.data == "list":
        if not items_to_search and not favorite_items:
            await query.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_keyboard())
            return
        text = "üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ:\n"
        for name, p in items_to_search.items():
            text += f"‚Ä¢ {name} ‚Äî {p['min']}‚Ç¨‚Äì{p['max']}‚Ç¨\n"
        text += "\n‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:\n"
        for name, max_price in favorite_items.items():
            text += f"‚Ä¢ {name} ‚Äî –¥–æ {max_price}‚Ç¨\n"
        await query.message.reply_text(text, reply_markup=main_keyboard())
    elif query.data == "scan":
        await scan(query, context)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    mode = waiting_for_input.get(user_id)

    if not mode:
        return

    parts = update.message.text.strip().split()
    if not parts:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.", reply_markup=main_keyboard())
        return

    prices = []
    while parts and re.match(r"^\d+([.,]\d+)?$", parts[-1]):
        prices.insert(0, float(parts.pop().replace(",", ".")))

    item_name = " ".join(parts).lower()
    if not item_name:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.", reply_markup=main_keyboard())
        return

    if mode == "add":
        if len(prices) == 2:
            min_price, max_price = prices
        elif len(prices) == 1:
            min_price, max_price = 0, prices[0]
        else:
            min_price, max_price = 0, 999

        items_to_search[item_name] = {"min": min_price, "max": max_price}
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {item_name} –æ—Ç {min_price}‚Ç¨ –¥–æ {max_price}‚Ç¨",
            reply_markup=main_keyboard()
        )
    elif mode == "fav":
        if prices:
            favorite_items[item_name] = prices[0]
            await update.message.reply_text(
                f"‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {item_name} –¥–æ {prices[0]}‚Ç¨",
                reply_markup=main_keyboard()
            )
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É.", reply_markup=main_keyboard())
    del waiting_for_input[user_id]

async def scan(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    found = []
    try:
        response = requests.get(API_URL)
        data = response.json()

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price = entry.get("min_price")
            item_url = entry.get("item_page", "")

            if not name or not min_price:
                continue

            name_set = normalize(name)
            price_f = float(min_price)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for item_name, price_range in items_to_search.items():
                if normalize(item_name).issubset(name_set) and price_range["min"] <= price_f <= price_range["max"]:
                    found.append(f"üéØ {name} ‚Äî {price_f}‚Ç¨\nüîó {item_url}")
                    break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            for fav_name, max_price in favorite_items.items():
                if normalize(fav_name).issubset(name_set) and price_f <= max_price:
                    found.append(f"‚≠ê {name} ‚Äî {price_f}‚Ç¨\nüîó {item_url}")
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ä–∞–∑—É, –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–æ
                    await context.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=f"‚≠ê –ù–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º:\n{name} ‚Äî {price_f}‚Ç¨\nüîó {item_url}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await update_or_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.", reply_markup=main_keyboard())
        return

    if isinstance(update_or_query, Update):  # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
        msg = "–ù–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n".join(found) if found else "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update_or_query.message.reply_text(msg, reply_markup=main_keyboard())

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == '__main__':
    main()
