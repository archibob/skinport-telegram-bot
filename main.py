import requests
import time
import brotli

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = "your-telegram-bot-token"
TELEGRAM_CHAT_ID = "your-telegram-chat-id"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

# üß≤ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
KEYWORDS = ["–ö–æ–≥–æ—Ç—å", "–°–∞–∂–∞"]

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Brotli
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Accept": "application/json",
    "Accept-Encoding": "br",  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Brotli
}

def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", response.text)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ Telegram:", e)

def check_items():
    try:
        response = requests.get(API_URL, headers=HEADERS)  # –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"Status Code: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 200
        if response.status_code != 200:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Skinport: {response.status_code}\n{response.text}"
            print(error_text)
            send_telegram_message(error_text)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_type = response.headers.get("Content-Type")
        if "application/json" not in content_type:
            error_msg = f"‚ùó –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ü–æ–ª—É—á–µ–Ω —Ç–∏–ø: {content_type}"
            print(error_msg)
            send_telegram_message(error_msg)
            return

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∂–∞—Ç—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Brotli
        if 'br' in response.headers.get('Content-Encoding', ''):
            response_content = brotli.decompress(response.content).decode('utf-8')
        else:
            response_content = response.text  # –µ—Å–ª–∏ –Ω–µ —Å–∂–∞—Ç–æ, –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç

        print("Response content:", response_content)

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            items = response.json()  # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤")
        except ValueError:
            error_msg = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {response_content}"
            print(error_msg)
            send_telegram_message(error_msg)
            return

        # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        found = False
        for item in items:
            market_name = item.get("market_hash_name", "")
            price = item.get("min_price", 0)
            if any(keyword.lower() in market_name.lower() for keyword in KEYWORDS):
                message = f"üîî –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç:\n{market_name}\nüí∂ –¶–µ–Ω–∞: {price / 100:.2f} EUR"
                print(message)
                send_telegram_message(message)
                found = True

        if not found:
            print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        error_msg = f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {e}"
        print(error_msg)
        send_telegram_message(error_msg)

# üîÅ –ó–∞–ø—É—Å–∫ –≤ —Ü–∏–∫–ª–µ
while True:
    check_items()
    time.sleep(60)  # –ü–∞—É–∑–∞ 60 —Å–µ–∫—É–Ω–¥
