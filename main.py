import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
TELEGRAM_CHAT_ID = "–í–ê–®_CHAT_ID"
API_URL = "https://api.skinport.com/v1/items?app_id=730&currency=EUR"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

items_to_search = {}

def normalize(name: str) -> str:
    return name.lower().replace("|", "").replace("-", "").replace("  ", " ").strip()

async def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ Skinport.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> [–º–∏–Ω_—Ü–µ–Ω–∞] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/remove <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n"
        "/search ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "/scan ‚Äî —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É"
    )
    await update.message.reply_text(message)

async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–º–∞–∫—Å_—Ü–µ–Ω–∞> [–º–∏–Ω_—Ü–µ–Ω–∞]")
        return

    try:
        if len(context.args) >= 3:
            try:
                max_price = float(context.args[-2].replace(",", "."))
                min_price = float(context.args[-1].replace(",", "."))
                name_parts = context.args[:-2]
            except ValueError:
                max_price = float(context.args[-1].replace(",", "."))
                min_price = None
                name_parts = context.args[:-1]
        else:
            max_price = float(context.args[-1].replace(",", "."))
            min_price = None
            name_parts = context.args[:-1]
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.")
        return

    item_name = " ".join(name_parts)

    if min_price is not None and min_price > max_price:
        await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π.")
        return

    items_to_search[item_name] = (min_price, max_price)

    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω: {item_name} —Å —Ü–µ–Ω–æ–π –æ—Ç {min_price if min_price else '–Ω–µ –∑–∞–¥–∞–Ω–æ'} –¥–æ {max_price}‚Ç¨"
    )

async def remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /remove <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    item_name = " ".join(context.args)
    if item_name in items_to_search:
        del items_to_search[item_name]
        await update.message.reply_text(f"–£–¥–∞–ª—ë–Ω: {item_name}")
    else:
        await update.message.reply_text(f"{item_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

async def search_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not items_to_search:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n"
    for item, (min_price, max_price) in items_to_search.items():
        message += f"- {item} –æ—Ç {min_price if min_price else 0}‚Ç¨ –¥–æ {max_price}‚Ç¨\n"
    await update.message.reply_text(message)

async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    found = []
    try:
        response = requests.get(API_URL)
        data = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ—Ç API")

        for entry in data:
            name = entry.get("market_hash_name", "")
            min_price_entry = entry.get("min_price")
            item_url = entry.get("item_page", "")

            norm_name = normalize(name)

            for item_name, (min_price, max_price) in items_to_search.items():
                query = normalize(item_name)

                if query in norm_name and min_price_entry:
                    price = float(min_price_entry)
                    if price <= max_price and (min_price is None or price >= min_price):
                        if "graffiti" not in norm_name:
                            found.append(f"{name} –∑–∞ {price}‚Ç¨\nüîó {item_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        return

    if found:
        await update.message.reply_text("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n" + "\n\n".join(found))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_item))
    app.add_handler(CommandHandler("remove", remove_item))
    app.add_handler(CommandHandler("search", search_items))
    app.add_handler(CommandHandler("scan", scan))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == '__main__':
    main()
